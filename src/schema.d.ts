/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects
         * @description List all projects. Requires Personal Token and returns only projects for the authenticated user.
         *
         */
        get: operations["listProjectsV2"];
        put?: never;
        /**
         * Create project
         * @description Create a new project
         */
        post: operations["createProjectV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/jobs/auto-translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create auto-translation jobs
         * @description Create auto-translation jobs for a project and multiple languages.
         *     The endpoint doesn't allow to customize auto-translation options (e.g. source language, target language, etc.).
         *     Those values are taken from the latest used auto-translation configuration.
         *     Thanks to that you can simply choose which languages you want to translate.
         *
         */
        post: operations["autoTranslate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["importFileFromApi"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/environments/{environmentKey}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish translations to given environment
         * @description The endpoint is used for publishing translations for given environment.
         *     By default, every project has two Translation Hosting environments (_latest and _production) and Translation Editor environment.
         *     Publication always (if not specified differently in the project settings) happens from the Translation Editor environment to the '_latest' environment, and then to the '_production' environment.
         *     There is no way to change this flow other than creating a custom environment in the project settings.
         *     In order to publish translations to the Production environment, you need use '_production' as 'environmentKey' parameter.
         *     In order to publish translations to the Latest environment, you need use '_latest' as 'environmentKey' parameter.
         *     In order to publish translations to the custom environment, you need use your custom environment key as 'environmentKey' parameter.
         *
         */
        post: operations["publishTranslations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/translation-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get translation keys
         * @description Get translation keys for a project.
         *
         *     All parameters are optional.
         *
         *     Parameters are used for filtering translations by given values, and they are case sensitive and exact match.
         *
         *     Default page size is 100 and maximum page size is 2500. Page size can be changed by 'size' parameter.
         *
         *     Default page is 0. Page can be changed by 'page' parameter.
         *
         */
        get: operations["getTranslationKeys"];
        put?: never;
        /**
         * Create translation key
         * @description Creates translation key for a project. It throws an error if translation key already exists.
         *
         *     'key' is a required field, and it cannot be null or empty. The endpoint throws an error if 'key' is null or empty.
         *
         *     'namespace', 'description' and 'codeDescription' are optional fields, and they can be null or empty. Null and empty values are ignored.
         *
         *     Max size of 'description' and 'codeDescription' is 500 characters, otherwise, the endpoint throws an error.
         *
         *     If 'namespace' is not provided, the default namespace is used.
         *
         *     If 'description' is not provided, the empty string is used. Description is used for translation key comments that are visible in the editor, and they be edited in the editor.
         *
         *     If 'codeDescription' is not provided, the empty string is used. Code description is used for code comments that are visible in the editor, but they cannot be edited in the editor.
         *
         */
        post: operations["createTranslationKey"];
        /**
         * Delete translation key
         * @description Deletes translation key for a project
         */
        delete: operations["deleteTranslationKey"];
        options?: never;
        head?: never;
        /**
         * Update translation key
         * @description Updates key, namespace, description and/or code description for a project. It throws an error if translation key does not exist or if the new key/namespace combination already exists.
         *
         *     Key, namespace, description and code description are optional fields, and they can be null or empty. Null and empty values are ignored, and they are not updated.
         *
         *     The last seen date is updated automatically even if there is no changes.
         *
         *     Max size of description and code description is 500 characters, otherwise, the endpoint throws an error.
         *
         */
        patch: operations["updateTranslationKey"];
        trace?: never;
    };
    "/api/v1/translation-keys/screenshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload translation key screenshot
         * @description Uploads translation key screenshot from image encoded in base64. It throws an error if translation key does not exist.
         *
         *     The uploaded screenshot replaces the existing screenshot if it exists.
         *
         *     'key' is a required field, and it cannot be null or empty. The endpoint throws an error if 'key' is null or empty.
         *
         *     'namespace' is an optional field, and it can be null or empty. Null and empty values are ignored.
         *
         *     If 'namespace' is not provided, then an empty namespace is used.
         *
         *     Max size of screenshot is 2MB for base64, otherwise, the endpoint throws an error.
         *
         *     Only PNG, JPG and JPEG formats are supported, otherwise, the endpoint may throw an error.
         *
         */
        post: operations["uploadTranslationKeyScreenshot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/translation-keys/screenshots/file-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload translation key screenshot from file
         * @description Uploads translation key screenshot from a file. It throws an error if translation key does not exist.
         *
         *     The uploaded screenshot replaces the existing screenshot if it exists.
         *
         *     'key' is a required field, and it cannot be null or empty. The endpoint throws an error if 'key' is null or empty.
         *
         *     'namespace' is an optional field, and it can be null or empty. Null and empty values are ignored.
         *
         *     If 'namespace' is not provided, then an empty namespace is used.
         *
         *     Max size of screenshot is 4MB for file upload, otherwise, the endpoint throws an error.
         *
         *     Only PNG, JPG and JPEG formats are supported, otherwise, the endpoint may throw an error.
         *
         */
        post: operations["uploadTranslationKeyScreenshotFileUpload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/translation-keys/screenshots/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload translation key screenshot from file */
        post: operations["uploadTranslationKeyScreenshotFileUploadBulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/translation-keys/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create translation keys in bulk
         * @description Creates translation keys for a project. In the same manner as the single key creation endpoint.
         *
         *     It doesn't throw an error if translation key already exists, but it returns a list of failures.
         *
         *     You can create up to 100 translation keys at once.
         *
         */
        post: operations["createTranslationKeyBulk"];
        /**
         * Delete translation keys in bulk
         * @description Deletes translation keys for a project. In the same manner as the single key delete endpoint.
         *
         *     It doesn't throw an error if translation key doesn't exist, but it returns a list of failures.
         *
         *     You can delete up to 100 translation keys at once.
         *
         */
        delete: operations["deleteTranslationKeyBulk"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/translate/estimate-cost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["estimateCost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stacktrace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendStacktrace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllLanguages"];
        put?: never;
        post: operations["createLanguage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/auto-translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create auto-translation job
         * @description Create auto-translation job for a project and one language
         */
        post: operations["autoTranslate_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllCustomers"];
        put?: never;
        post: operations["createCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auto-translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Auto-translate single text
         * @description Auto-translate single text for a project
         */
        post: operations["autoTranslate_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/translations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get translations
         * @description Get translations for a project.
         *
         *     All parameters are optional.
         *
         *     'text' parameter is used for searching translations by text value with contains ignore-case operator. Minimum length of the text is 3 characters.
         *
         *     If 'text' parameter is provided, then results are limited to 10.
         *
         *     Other parameters are used for filtering translations by given values.
         *
         *     Set 'baseOnly' parameter to 'true' to get translations without customer translations, default value is 'false'.
         *
         *     Default page size is 100 and maximum page size is 2500. Page size can be changed by 'size' parameter.
         *
         *     Default page is 0. Page can be changed by 'page' parameter.
         *
         */
        get: operations["getTranslationsV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update single translation
         * @description Updates a single translation.
         *
         *     It throws an error if the translation key (with optional namespace), language key or customerId does not exist.
         *
         *     'key' and 'language' are required fields.
         *
         *     'text' and 'reviewStatus' are the fields that can be updated.
         *
         *     If 'text' is not provided, then the translation is not updated.
         *
         *     If 'reviewStatus' is not provided, then the translation is marked as 'NOT_REVIEWED'. Allowed values are 'REVIEWED' and 'NOT_REVIEWED'.
         *
         */
        patch: operations["updateTranslationsV2"];
        trace?: never;
    };
    "/api/v2/translations/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update translations in bulk
         * @description Updates translations in bulk with a single request.
         *
         *     It returns a list of failed translation updates with error messages.
         *
         *     You can update up to 100 translations at once.
         *
         *
         */
        patch: operations["updateTranslationsV2Bulk"];
        trace?: never;
    };
    "/api/v1/languages/{languageKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLanguage"];
        put?: never;
        post?: never;
        delete: operations["deleteLanguage"];
        options?: never;
        head?: never;
        patch: operations["updateLanguage"];
        trace?: never;
    };
    "/api/v1/customers/{customerKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCustomer"];
        put?: never;
        post?: never;
        delete: operations["deleteCustomer"];
        options?: never;
        head?: never;
        patch: operations["updateCustomer"];
        trace?: never;
    };
    "/api/v4/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["exportFileV4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project details
         * @description Get all project details
         */
        get: operations["getProjectDetailsV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTranslationJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/environments/{environmentKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get hosting status for given environment
         * @description The endpoint is used for getting hosting status for given environment.
         *
         */
        get: operations["getEnvironmentStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTranslationJobs_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getJobStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project activity
         * @description Get project activity. Maximum page size is 50, default page size is 10. You can fetch up to 500 latest entries for the project.
         *
         */
        get: operations["fetchProjectActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiError: {
            /** Format: int32 */
            status?: number;
            msg?: string;
            code?: string;
            errors?: string[];
        };
        ProjectCreateRequest: {
            name: string;
        };
        CustomerOverride: {
            key?: string;
            description?: string;
        };
        Language: {
            key?: string;
            name?: string;
            isDefault?: boolean;
            /** Format: int32 */
            order?: number;
            flag?: string;
            /** @enum {string} */
            access?: "WRITE_READ" | "READ" | "HIDDEN";
            /** @enum {string} */
            translationProvider?: "GOOGLE_TRANSLATE" | "DEEPL" | "OPEN_AI" | "EXTERNAL_API" | "SYSTRAN";
            providerLanguage?: string;
            sourceLanguage?: string;
            deeplFormality?: string;
        };
        ProjectReadDetails: {
            name?: string;
            languages?: components["schemas"]["Language"][];
            customers?: components["schemas"]["CustomerOverride"][];
            projectToken?: string;
            apiKey?: string;
            /** Format: int32 */
            keys?: number;
            /** Format: int32 */
            unpublishedChanges?: number;
            /** Format: double */
            translatedPercentage?: number;
            translatedKeysByLanguage?: {
                [key: string]: number;
            };
        };
        ApiAutoTranslateRequestV2: {
            /**
             * @description Project source language keys, if not provided then all languages will be translated. Auto-translation configuration will be used from the last auto-translation job.
             * @example [en_US]
             */
            languageKeys?: string[];
            /**
             * @description Options for auto-translation
             * @example []
             * @enum {array}
             */
            options?: "FORCE_REPLACE" | "USE_TRANSLATION_KEYS";
        };
        JobItem: {
            jobId?: string;
            /** Format: float */
            progress?: number;
            state?: string;
            type?: string;
            message?: string;
            /** Format: date-time */
            started?: string;
            metadata?: {
                [key: string]: string;
            };
        };
        ImportFileResponse: {
            /** Format: int64 */
            numberOfKeysFound?: number;
            /** Format: int64 */
            numberOfUniqueKeysFound?: number;
            foundLanguages?: components["schemas"]["Language"][];
        };
        CreateTranslationKeyRequestV2: {
            key: string;
            namespace?: string;
            description?: string;
            codeDescription?: string;
        };
        UploadTranslationKeyScreenshotRequestV2: {
            /** @example /9j/4AAQSkZJRgABAgAAZABkAAD/... */
            base64: string;
        };
        UploadMultipleScreenshot: {
            base64: string;
            name: string;
            ocr?: string[];
            translationKeys?: components["schemas"]["UploadScreenshotKeyNamespace"][];
        };
        UploadScreenshotKeyNamespace: {
            key: string;
            namespace?: string;
        };
        CreateTranslationKeyBulkRequestV2: {
            translationKeys?: components["schemas"]["CreateTranslationKeyRequestV2"][];
        };
        CreateTranslationKeyBulkResponseV2: {
            failures?: components["schemas"]["Failure"][];
        };
        Failure: {
            entry?: components["schemas"]["CreateTranslationKeyRequestV2"];
            message?: string;
        };
        AutoTranslationConstEstimationResponse: {
            /** Format: int32 */
            translationKeys?: number;
            /** Format: int32 */
            characters?: number;
        };
        ErrorReportRequest: {
            message?: string;
            stacktrace?: string;
        };
        LanguageCreateRequestV1: {
            key: string;
            name?: string;
        };
        LanguageDetailsResponseV1: {
            key?: string;
            name?: string;
        };
        AutoTranslateSingleLanguageRequest: {
            /**
             * @description Project target language key
             * @example pl_PL
             */
            targetProjectLanguage: string;
            /**
             * @description Translator provider language key
             * @example en_US
             */
            targetLanguage: string;
            /**
             * @description Project source language key
             * @example en_US
             */
            sourceProjectLanguage?: string;
            /**
             * @description Translator provider source language key
             * @example en_US
             */
            sourceLanguage?: string;
            /** @description Google API key */
            googleApiKey?: string;
            /** @description Glossary ID for DeepL translator */
            deeplGlossaryId?: string;
            /** @description DeepL API key */
            deeplApiKey?: string;
            /**
             * @description DeepL formality
             * @example default
             * @enum {string}
             */
            deeplFormality?: "default, more, less";
            /**
             * @description Options for auto-translation
             * @example []
             * @enum {array}
             */
            options?: "FORCE_REPLACE" | "USE_TRANSLATION_KEYS";
            /**
             * @description Translation provider
             * @example GOOGLE_TRANSLATE
             * @enum {string}
             */
            translationProvider: "GOOGLE_TRANSLATE" | "DEEPL" | "OPEN_AI" | "EXTERNAL_API" | "SYSTRAN" | "GOOGLE_TRANSLATE" | "DEEPL" | "OPEN_AI";
            /**
             * @description List of keys to translate
             * @example [
             *       {
             *         "key": "key1",
             *         "namespace": ""
             *       },
             *       {
             *         "key": "key2",
             *         "namespace": ""
             *       }
             *     ]
             */
            keys?: components["schemas"]["KeyNamespaceRequest"][];
        };
        /**
         * @description List of keys to translate
         * @example [
         *       {
         *         "key": "key1",
         *         "namespace": ""
         *       },
         *       {
         *         "key": "key2",
         *         "namespace": ""
         *       }
         *     ]
         */
        KeyNamespaceRequest: {
            key?: string;
            namespace?: string;
        };
        CustomerCreateRequestV1: {
            key: string;
            description?: string;
        };
        CustomerDetailsResponseV1: {
            key?: string;
            description?: string;
        };
        AutoTranslateSingleTextRequest: {
            /**
             * @description Provider target language key
             * @example en_US
             */
            targetLanguage: string;
            /**
             * @description Project target language key (optional). It's required to load additional information about the target language (e.g. DeepL glossary).
             * @example pl_PL
             */
            targetProjectLanguage?: string;
            /**
             * @description DeepL formality
             * @example default
             * @enum {string}
             */
            deeplFormality?: "default, more, less";
            /**
             * @description Description that will be used as a context for translation. It's useful for better translation quality.
             * @example This is a button label in Sign Up form.
             */
            description?: string;
            /**
             * @description Provider for auto-translation
             * @example GOOGLE_TRANSLATE
             * @enum {string}
             */
            translationProvider: "GOOGLE_TRANSLATE" | "DEEPL" | "OPEN_AI" | "EXTERNAL_API" | "SYSTRAN" | "GOOGLE_TRANSLATE" | "DEEPL" | "OPEN_AI";
            /**
             * @description Source text to translate
             * @example Hello world!
             */
            sourceText: string;
            /**
             * @description Project source language key (optional). It's required to load additional information about the source language (e.g. DeepL glossary).
             * @example pl_PL
             */
            sourceProjectLanguage?: string;
            /**
             * @description Provider source language key (optional). If not provided, the source language will be detected automatically.
             * @example PL
             */
            sourceLanguage?: string;
        };
        ApiSingleTranslateResponse: {
            translatedText?: string;
        };
        /** @enum {object} */
        ReviewStatus: string;
        UpdateTranslationRequestV2: {
            key: string;
            language: string;
            text: string;
            customerId?: string;
            namespace?: string;
            reviewStatus?: components["schemas"]["ReviewStatus"];
        };
        UpdateTranslationBulkRequestV2: {
            translations?: components["schemas"]["UpdateTranslationRequestV2"][];
        };
        UpdateTranslationBulkResponseV2: {
            failures?: components["schemas"]["Failure"][];
        };
        UpdateTranslationKeyRequestV2: {
            key?: string;
            namespace?: string;
            description?: string;
            codeDescription?: string;
        };
        LanguageUpdateRequestV1: {
            key?: string;
            name?: string;
        };
        CustomerUpdateRequestV1: {
            key?: string;
            description?: string;
        };
        DownloadableFile: {
            url?: string;
            namespace?: string;
            language?: string;
        };
        GetExportTranslationsV4: {
            files?: components["schemas"]["DownloadableFile"][];
        };
        /** @description Response data */
        ApiTranslationResponseV2: {
            /** @example hello_world */
            key?: string;
            /** @example common */
            namespace?: string;
            /** @example en_EN */
            language?: string;
            /** @example acme */
            customerId?: string;
            /** @example Hello world */
            text?: string;
            /** @example NOT_REVIEWED */
            reviewStatus?: string;
            /** @example 2021-01-01T00:00:00.000Z */
            lastModifiedAt?: string;
        };
        /** @description Page details */
        PageDetails: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            currentPage?: number;
            hasNext?: boolean;
            first?: boolean;
            last?: boolean;
        };
        PagedTranslationsV2RestResponse: {
            /**
             * @description Message
             * @example OK
             */
            msg?: string;
            /**
             * Format: int32
             * @description Status code
             * @example 200
             */
            status?: number;
            /** @description Response data */
            data?: components["schemas"]["ApiTranslationResponseV2"][];
            pageDetails?: components["schemas"]["PageDetails"];
        };
        ApiCustomerDetailsV2: {
            key?: string;
        };
        ApiLanguageDetailsV2: {
            key?: string;
            name?: string;
            isDefault?: boolean;
            /** @enum {string} */
            translationProvider?: "GOOGLE_TRANSLATE" | "DEEPL" | "OPEN_AI" | "EXTERNAL_API" | "SYSTRAN";
            providerLanguage?: string;
        };
        ApiNamespaceDetailsV2: {
            name?: string;
        };
        ApiProjectDetailsItemV2: {
            name?: string;
            projectToken?: string;
            apiKey?: string;
            languages?: components["schemas"]["ApiLanguageDetailsV2"][];
            customers?: components["schemas"]["ApiCustomerDetailsV2"][];
            namespaces?: components["schemas"]["ApiNamespaceDetailsV2"][];
            /** Format: int32 */
            keys?: number;
            /** Format: int32 */
            unpublishedChanges?: number;
            /** Format: double */
            translatedPercentage?: number;
            lastActivityAt?: string;
            lastEditedAt?: string;
            createdAt?: string;
            translatedKeysByLanguage?: {
                [key: string]: number;
            };
        };
        ApiEnvironmentDetailsV2: {
            name?: string;
            key?: string;
            color?: string;
        };
        ApiHostingResourceV2: {
            path?: string;
            namespace?: string;
            language?: string;
            customerId?: string;
            key?: string;
        };
        ApiProjectDetailsV2: {
            name?: string;
            projectToken?: string;
            languages?: components["schemas"]["ApiLanguageDetailsV2"][];
            customers?: components["schemas"]["ApiCustomerDetailsV2"][];
            namespaces?: components["schemas"]["ApiNamespaceDetailsV2"][];
            environments?: components["schemas"]["ApiEnvironmentDetailsV2"][];
            /** Format: int32 */
            keys?: number;
            /** Format: int32 */
            unpublishedChanges?: number;
            /** Format: double */
            translatedPercentage?: number;
            lastActivityAt?: string;
            lastEditedAt?: string;
            createdAt?: string;
            translatedKeysByLanguage?: {
                [key: string]: number;
            };
            hostingResources?: components["schemas"]["ApiHostingResourceV2"][];
        };
        JobItemV2: {
            jobId?: string;
            /** Format: float */
            progress?: number;
            status?: string;
            type?: string;
            message?: string;
            /** Format: date-time */
            createdAt?: string;
            metadata?: {
                [key: string]: string;
            };
        };
        ApiEnvironmentStatusResource: {
            /** @example {{projectToken}}/{{environment}}/_index */
            link?: string;
            /** @example acme */
            customer?: string;
            /** @example en */
            language?: string;
            /** @example common */
            namespace?: string;
            /**
             * Format: int32
             * @example 89571
             */
            size?: number;
        };
        ApiEnvironmentStatusResponse: {
            /**
             * Format: int32
             * @example 2137
             */
            numberOfKeys?: number;
            /**
             * Format: int32
             * @example 5
             */
            numberOfLanguages?: number;
            /**
             * Format: int32
             * @example 642
             */
            numberOfNonEmptyTranslations?: number;
            /**
             * Format: date-time
             * @example 2021-01-01T00:00:00Z
             */
            createdAt?: string;
            resources?: components["schemas"]["ApiEnvironmentStatusResource"][];
        };
        PagedTranslationKeysV2RestResponse: {
            /**
             * @description Message
             * @example OK
             */
            msg?: string;
            /**
             * Format: int32
             * @description Status code
             * @example 200
             */
            status?: number;
            /** @description Response data */
            data?: components["schemas"]["TranslationKeyResponseV2"][];
            pageDetails?: components["schemas"]["PageDetails"];
        };
        /** @description Response data */
        TranslationKeyResponseV2: {
            key?: string;
            namespace?: string;
            description?: string;
            codeDescription?: string;
            createdAt?: string;
            createdSource?: string;
            lastSeenAt?: string;
            lastSeenSource?: string;
        };
        ActivityCdnResource: {
            link?: string;
            customerId?: string;
            language?: string;
            namespace?: string;
            /** Format: int32 */
            size?: number;
        };
        ActivityChange: {
            text?: string;
            /** @enum {string} */
            action?: "CREATE_KEY" | "DELETE_KEY" | "CHANGE_KEY" | "CHANGE_TRANSLATION" | "CHANGE_REVIEW_STATUS";
            key?: string;
            namespace?: string;
            oldNamespace?: string;
            oldKey?: string;
            newNamespace?: string;
            newKey?: string;
            language?: string;
            overrideKey?: string;
            reviewStatus?: string;
            /** Format: date-time */
            occurredAt?: string;
        };
        ActivityEnvironmentDetails: {
            key?: string;
            name?: string;
            color?: string;
        };
        ActivityItemResponseV1: {
            /** @enum {string} */
            type?: "EXTRACTION" | "IMPORT" | "REVERT" | "EXPORT" | "CHANGE" | "PUBLICATION" | "ENVIRONMENT_PUBLICATION" | "AUTO_TRANSLATION_SUCCESS" | "AUTO_TRANSLATION_FAILED" | "SUGGESTIONS_APPLIED" | "TEST";
            /** @enum {string} */
            source?: "WEB_EDITOR" | "FILE_IMPORT" | "CLI" | "API" | "WEB" | "AUTOMATION" | "AI";
            user?: string;
            /** Format: int32 */
            numberOfKeys?: number;
            /** Format: int32 */
            numberOfLanguages?: number;
            changes?: components["schemas"]["ActivityChange"][];
            running?: boolean;
            environment?: components["schemas"]["ActivityEnvironmentDetails"];
            cdnResources?: components["schemas"]["ActivityCdnResource"][];
            /** Format: date-time */
            createdAt?: string;
        };
        DeleteTranslationKeyBulkRequestV2: {
            translationKeys?: components["schemas"]["DeleteTranslationKeyRequestV2"][];
        };
        DeleteTranslationKeyRequestV2: {
            key: string;
            namespace?: string;
        };
        DeleteTranslationKeyBulkResponseV2: {
            failures?: components["schemas"]["Failure"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listProjectsV2: {
        parameters: {
            query?: {
                /**
                 * @description Select sorting method, default is alphabetical, case insensitive
                 * @example alphabetical
                 */
                sort?: "alphabetical" | "translation_progress" | "number_of_keys" | "number_of_languages" | "number_of_members" | "last_edited" | "last_activity" | "created";
            };
            header: {
                /** @description Personal Token */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["ApiProjectDetailsItemV2"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    createProjectV2: {
        parameters: {
            query?: never;
            header: {
                /** @description Personal Token */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["ProjectReadDetails"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    autoTranslate: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiAutoTranslateRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["JobItem"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    importFileFromApi: {
        parameters: {
            query: {
                uploadFormat: "android" | "android-strings" | "android-xml" | "csv-translations" | "excel" | "java-properties" | "localizable-xcstrings" | "localizable-strings" | "localizable-strings-dict" | "po-pot" | "php-array" | "string-resources" | "simplelocalize-json" | "single-language-json" | "multi-language-json" | "javascript" | "module-exports" | "yaml" | "qt-linguist" | "resx";
                importOptions?: ("PUBLISH_AFTER_IMPORT" | "REPLACE_TRANSLATION_IF_FOUND" | "TRIM_LEADING_TRAILING_SPACES" | "UNESCAPE_NEW_LINES" | "UNESCAPE_SINGLE_QUOTES" | "SHEETS_AS_NAMESPACES" | "MULTI_LANGUAGE" | "LANGUAGES_NESTED")[];
                languageKey?: string;
                customerId?: string;
                namespace?: string;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["ImportFileResponse"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    publishTranslations: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                environmentKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getTranslationKeys: {
        parameters: {
            query?: {
                key?: string;
                namespace?: string;
                page?: number;
                size?: number;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedTranslationKeysV2RestResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    createTranslationKey: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTranslationKeyRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    deleteTranslationKey: {
        parameters: {
            query: {
                key: string;
                namespace?: string;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    updateTranslationKey: {
        parameters: {
            query: {
                key: string;
                namespace?: string;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTranslationKeyRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    uploadTranslationKeyScreenshot: {
        parameters: {
            query: {
                key: string;
                namespace?: string;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadTranslationKeyScreenshotRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    uploadTranslationKeyScreenshotFileUpload: {
        parameters: {
            query: {
                key: string;
                namespace?: string;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    uploadTranslationKeyScreenshotFileUploadBulk: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadMultipleScreenshot"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    createTranslationKeyBulk: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTranslationKeyBulkRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["CreateTranslationKeyBulkResponseV2"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    deleteTranslationKeyBulk: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTranslationKeyBulkRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["DeleteTranslationKeyBulkResponseV2"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    estimateCost: {
        parameters: {
            query: {
                file: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["AutoTranslationConstEstimationResponse"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    sendStacktrace: {
        parameters: {
            query?: never;
            header?: {
                "X-SimpleLocalize-Token"?: string;
                "X-SimpleLocalize-Client"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorReportRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getAllLanguages: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["LanguageDetailsResponseV1"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    createLanguage: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LanguageCreateRequestV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["LanguageDetailsResponseV1"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    autoTranslate_1: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AutoTranslateSingleLanguageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["JobItem"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getAllCustomers: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["CustomerDetailsResponseV1"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    createCustomer: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerCreateRequestV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["CustomerDetailsResponseV1"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    autoTranslate_2: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AutoTranslateSingleTextRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["ApiSingleTranslateResponse"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getTranslationsV2: {
        parameters: {
            query?: {
                key?: string;
                namespace?: string;
                language?: string;
                text?: string;
                textStatus?: "EMPTY" | "NOT_EMPTY" | "";
                customerId?: string;
                baseOnly?: boolean;
                reviewStatus?: "REVIEWED" | "NOT_REVIEWED" | "";
                page?: number;
                size?: number;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedTranslationsV2RestResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    updateTranslationsV2: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTranslationRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    updateTranslationsV2Bulk: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTranslationBulkRequestV2"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["UpdateTranslationBulkResponseV2"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getLanguage: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                languageKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["LanguageDetailsResponseV1"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    deleteLanguage: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                languageKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    updateLanguage: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                languageKey: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LanguageUpdateRequestV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["LanguageDetailsResponseV1"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getCustomer: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                customerKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["CustomerDetailsResponseV1"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    deleteCustomer: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                customerKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    updateCustomer: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                customerKey: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerUpdateRequestV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["CustomerDetailsResponseV1"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    exportFileV4: {
        parameters: {
            query?: {
                downloadFormat?: "android" | "android-strings" | "android-xml" | "csv-translations" | "excel" | "java-properties" | "localizable-xcstrings" | "localizable-strings" | "localizable-strings-dict" | "po-pot" | "php-array" | "string-resources" | "simplelocalize-json" | "single-language-json" | "multi-language-json" | "javascript" | "module-exports" | "yaml" | "qt-linguist" | "resx";
                downloadOptions?: ("SPLIT_BY_LANGUAGES" | "SPLIT_BY_NAMESPACES" | "INCLUDE_DESCRIPTIONS" | "ONLY_NOT_TRANSLATED" | "ONLY_TRANSLATED" | "WRITE_NESTED" | "ESCAPE_NEW_LINES" | "ESCAPE_SINGLE_QUOTES" | "ZIP_FILES" | "SHEETS_AS_NAMESPACES" | "MULTI_LANGUAGE" | "LANGUAGES_NESTED")[];
                languageKeys?: string[];
                languageOrder?: string[];
                customerId?: string;
                sort?: "DEFAULT" | "NEWEST_KEYS_FIRST" | "NEWEST_KEYS_LAST" | "NAMESPACES" | "IMPORT_ORDER";
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["GetExportTranslationsV4"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getProjectDetailsV2: {
        parameters: {
            query?: never;
            header: {
                /** @description Project API Key */
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["ApiProjectDetailsV2"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getTranslationJobs: {
        parameters: {
            query?: {
                status?: string;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["JobItemV2"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getEnvironmentStatus: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                environmentKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["ApiEnvironmentStatusResponse"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getTranslationJobs_1: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["JobItem"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    getJobStatus: {
        parameters: {
            query?: never;
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path: {
                jobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["JobItem"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    fetchProjectActivity: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header: {
                "X-SimpleLocalize-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default OK */
                        msg: string;
                        /**
                         * Format: int32
                         * @default 200
                         */
                        status: number;
                        data?: components["schemas"]["ActivityItemResponseV1"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Payment Required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
}
